name: Terraform CI/CD on Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_TERRAFORM }}

      - name: Export Azure credentials to environment variables
        run: |
          echo '${{ secrets.AZURE_CREDENTIALS_TERRAFORM }}' > azure-creds.json
          echo "ARM_CLIENT_ID=$(jq -r .clientId azure-creds.json)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret azure-creds.json)" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId azure-creds.json)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId azure-creds.json)" >> $GITHUB_ENV

      - name: Generate or load unique storage account name
        run: |
          FILE=".azure-backend-name"

          if [ -f "$FILE" ]; then
            ACCOUNT_NAME=$(cat $FILE)
            echo "Using existing storage account: $ACCOUNT_NAME"
          else
            SUFFIX=$(date +%s | sha256sum | cut -c1-10)
            ACCOUNT_NAME="tfstate${SUFFIX}"
            echo "$ACCOUNT_NAME" > $FILE
            echo "Generated storage account: $ACCOUNT_NAME"
            git config user.email "actions@github.com"
            git config user.name "GitHub Actions"
            git add $FILE
            git commit -m "Store backend storage account name"
            git push
          fi

          echo "TF_STORAGE_ACCOUNT=$ACCOUNT_NAME" >> $GITHUB_ENV

      - name: Install yq (mikefarah version)
        run: |
            sudo wget https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq

      - name: Update storage_account_name in variables.yml
        run: |
          echo "Updating variables.yml with storage account: $TF_STORAGE_ACCOUNT"
          yq e '.storage_account_name = strenv(TF_STORAGE_ACCOUNT)' -i variables.yml

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap backend resources in Azure
        run: |
          echo "Ensure resource group exists"
          az group show --name k8s-terraform || \
          az group create --name k8s-terraform --location "westeurope"

          echo "Ensure storage account exists"
          az storage account show --name $TF_STORAGE_ACCOUNT --resource-group k8s-terraform || \
          az storage account create --name $TF_STORAGE_ACCOUNT \
            --resource-group k8s-terraform \
            --location "westeurope" \
            --sku Standard_LRS \
            --encryption-services blob

          echo "Ensure container exists"
          az storage container show --name terraform-state --account-name $TF_STORAGE_ACCOUNT || \
          az storage container create --name terraform-state \
            --account-name $TF_STORAGE_ACCOUNT --auth-mode login

      - name: Get Storage Account Key
        run: |
          echo "STORAGE_KEY=$(az storage account keys list --resource-group k8s-terraform --account-name $TF_STORAGE_ACCOUNT --query '[0].value' -o tsv)" >> $GITHUB_ENV
      
      - name: Assign AKS permissions to GitHub Actions SP
        run: |
            CLUSTER_ID=$(az aks show \
              --resource-group k8s-terraform \
              --name k8s-terraform-cluster \
              --query id -o tsv)
  
            echo "Assigning AKS Cluster User Role to $ARM_CLIENT_ID"
            az role assignment create \
              --assignee $ARM_CLIENT_ID \
              --role "Azure Kubernetes Service Cluster User Role" \
              --scope $CLUSTER_ID || echo "Role assignment may already exist"

      - name: Terraform Init with backend
        run: |
          terraform init \
            -backend-config="resource_group_name=k8s-terraform" \
            -backend-config="storage_account_name=${{ env.TF_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=terraform-state" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="access_key=${{ env.STORAGE_KEY }}"

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
